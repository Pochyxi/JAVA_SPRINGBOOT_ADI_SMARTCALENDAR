# Definisce il nome del file Docker Compose
name: postgres-pgadmin-smartcalendar

# Definizione delle reti utilizzate nel file Compose
networks:
  nt_smartaxcy:  # Riutilizza la rete chiamata "nt_smartaxcy"
    external: true  # Indica che la rete esiste già e verrà utilizzata da questo compose

# Definizione dei servizi (container) che verranno eseguiti
services:
  pgsql_calendar:  # Servizio chiamato "pgsql_calendar" (PostgreSQL per smartcalendar)
    image: postgres:latest  # Utilizza l'immagine Docker di PostgreSQL nella versione più recente
    restart: unless-stopped  # Il container si riavvia automaticamente tranne se viene fermato esplicitamente
    container_name: postgresql_smartcalendar  # Nome del container specificato come "postgresql_smartcalendar"
    volumes:
      - psdb-volume-smartcalendar:/var/lib/postgresql/data  # Mappa un volume per mantenere i dati persistenti del database
    networks:
      nt_smartaxcy:  # Connetti il container alla rete "nt_smartaxcy"
        ipv4_address: 172.24.0.5  # Assegna un indirizzo IP statico specifico al container
    ports:
      - "5450:5432"  # Espone la porta 5432 del container sulla porta 5450 dell'host
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Admin94!}  # Definisce la password dell'utente PostgreSQL, con valore predefinito se non specificato
      POSTGRES_DB: ${POSTGRES_DB:-smartcalendardb}  # Crea il database "smartcalendardb" all'avvio
    healthcheck:  # Configurazione di un healthcheck per il servizio PostgreSQL
      test: ["CMD-SHELL", "pg_isready -U postgres"]  # Comando per verificare se PostgreSQL è pronto
      interval: 10s  # Intervallo tra ogni healthcheck (10 secondi)
      timeout: 5s  # Timeout per ogni tentativo di healthcheck (5 secondi)
      retries: 5  # Numero di tentativi di healthcheck prima di dichiarare il container "non sano"

  pgadmin_calendar:  # Servizio chiamato "pgadmin_calendar" (pgAdmin per la gestione di PostgreSQL)
    image: dpage/pgadmin4  # Utilizza l'immagine Docker per pgAdmin 4
    restart: unless-stopped  # Il container si riavvia automaticamente tranne se viene fermato esplicitamente
    container_name: pgadmin_smartcalendar  # Nome del container specificato come "pgadmin_smartcalendar"
    networks:
      nt_smartaxcy:  # Connetti il container alla rete "nt_smartaxcy"
        ipv4_address: 172.24.0.6  # Assegna un indirizzo IP statico specifico al container
    ports:
      - "8092:80"  # Espone la porta 80 del container sulla porta 8092 dell'host
    environment:
      PGADMIN_CONFIG_SERVER_MODE: "True"  # Abilita la modalità server di pgAdmin
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-adienerlopez@gmail.com}  # Definisce l'email predefinita per l'accesso a pgAdmin
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-Admin94!}  # Definisce la password predefinita per l'accesso a pgAdmin
    depends_on:
      - pgsql_calendar  # Specifica che questo servizio deve essere avviato solo dopo che "pgsql_calendar" è pronto

  smartcalendar-app:  # Servizio per l'applicazione Spring Boot
    build:
      context: .  # Usa il Dockerfile presente nella directory corrente
      dockerfile: Dockerfile  # Specifica il nome del Dockerfile
    container_name: smartcalendar-app  # Nome del container per il backend
    restart: unless-stopped  # Riavvia automaticamente il container tranne se fermato esplicitamente
    ports:
      - "8093:8080"  # Espone la porta 8093
    networks:
      nt_smartaxcy:  # Connetti l'app alla rete "nt_smartaxcy"
        ipv4_address: 172.24.0.7  # Assegna un IP statico per il backend
    depends_on:
      - pgsql_calendar  # Assicura che il servizio PostgreSQL sia pronto prima di avviare l'app

# Definisce un volume Docker per conservare i dati in modo persistente
volumes:
  psdb-volume-smartcalendar:  # Nome del volume persistente utilizzato dal database PostgreSQL
